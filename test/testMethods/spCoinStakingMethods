getStakingRewards = async(lastUpdateTime,  interestRate,  quantity) => {
    spCoinLogger.logFunctionHeader("getStakingRewards(lastUpdateTime,  interestRate,  quantity)");
    let stakingRewards = await this.spCoinContractDeployed.connect(this.signer).getStakingRewards(lastUpdateTime,  interestRate,  quantity);
    
    spCoinLogger.logExitFunction();
    return stakingRewards;
}

getTimeMultiplier = async(_timeMultiplier) => {
    spCoinLogger.getTimeMultiplier("getTimeMultiplier(_timeMultiplier)");
    let timeMultiplier = await this.spCoinContractDeployed.connect(this.signer).getTimeMultiplier(_timeMultiplier);
    
    spCoinLogger.logExitFunction();
    return timeMultiplier;
}

getAccountTimeInSecondeSinceUpdate = async(_tokenLastUpdate) => {
    spCoinLogger.getAccountTimeInSecondeSinceUpdate("getAccountRecords(_tokenLastUpdate)");
    let timeInSecondeSinceUpdate = await this.spCoinContractDeployed.connect(this.signer).getAccountTimeInSecondeSinceUpdate(_tokenLastUpdate);
    
    spCoinLogger.logExitFunction();
    return timeInSecondeSinceUpdate;
}

getAnnualizedPercentageForGivenTimeInterval = async(_timeInSeconds) => {
    spCoinLogger.getAnnualizedPercentageForGivenTimeInterval("getAccountRecords(_timeInSeconds)");
    let annualizedPercentage = await this.spCoinContractDeployed.connect(this.signer).getAnnualizedPercentageForGivenTimeInterval(_timeInSeconds);
    
    spCoinLogger.logExitFunction();
    return annualizedPercentage;
}

/* FROM TIME UTILS
   function getStakingRewards(uint _tokenLastUpdate, uint _interestRate, uint _quantity) public view returns(uint rewards) {
        uint accountTimeInSecondeSinceUpdate = this.getTimeMultiplier(_tokenLastUpdate);
        rewards = (_quantity * accountTimeInSecondeSinceUpdate * _interestRate) /100;
        return rewards;
    }

    function getTimeMultiplier(uint _tokenLastUpdate) public view returns(uint _timeMultiplier) {
        uint accountTimeInSecondeSinceUpdate = this.getAccountTimeInSecondeSinceUpdate(_tokenLastUpdate);
        _timeMultiplier = this.getAnnualizedPercentageForGivenTimeInterval(accountTimeInSecondeSinceUpdate);
        return _timeMultiplier;
    }

   function getAccountTimeInSecondeSinceUpdate(uint _tokenLastUpdate) public view returns(uint) {
        uint accountTimeInSecondeSinceUpdate = block.timestamp - _tokenLastUpdate;
        return accountTimeInSecondeSinceUpdate;
    }

    function getAnnualizedPercentageForGivenTimeInterval(uint _timeInSeconds) public pure returns(uint) {
        return year/_timeInSeconds;
    }
*/